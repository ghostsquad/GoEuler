package main

//go:generate go build -buildmode=plugin -o main.so main.go

import (
	"context"
	"fmt"
	"github.com/ghostsquad/goeuler/pkg"
)

// Highly divisible triangular number
// Problem 12
// The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

// Let us list the factors of the first seven triangle numbers:

//  1: 1
//  3: 1,3
//  6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28
// We can see that 28 is the first triangle number to have over five divisors.

// What is the value of the first triangle number to have over five hundred divisors?

type solution struct{}

// TODO This solution could use additional optimization
// took: 57.512249 seconds
func (s solution) Solve(ctx context.Context) {
	pkg.SolveWith(ctx, "example", func() uint64 {
		var answer uint64

		kp := pkg.NewPrimes()

		factorCount := 0
		currentNatural := uint64(0)
		for factorCount < 501 {
			currentNatural++
			answer = answer + currentNatural

			resultsChan, errChan := kp.Factorize(ctx, answer)

			// http://www.gmathacks.com/quant-topics/number-of-factors-of-a-large-integer.html

			factorPowers := map[uint64]int{}
			for factor := range resultsChan {
				//fmt.Printf("factor: %d\n", factor)
				if val, ok := factorPowers[factor]; ok {
					factorPowers[factor] = val + 1
				} else {
					factorPowers[factor] = 1
				}
			}

			//fmt.Printf("Factor powers: %v\n", factorPowers)

			if err := <-errChan; err != nil {
				fmt.Printf("received error from factorize! err: %v\n", err)
			}

			factorCount = 1
			for _, v := range factorPowers {
				factorCount = factorCount * (v + 1)
			}

			fmt.Printf("Triangle Num %d has %d factors\n", answer, factorCount)
		}

		return answer
	})
}

var Solution solution
